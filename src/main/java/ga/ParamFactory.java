package ga;

import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import org.uncommons.watchmaker.framework.factories.AbstractCandidateFactory;


public class ParamFactory extends AbstractCandidateFactory<List<ParamModel>>
{
 private final Method m;
 private final GenerateData gd;

 /**
  * @param alphabet The set of characters that can legally occur within a
  * string generated by this factory.
  * @param stringLength The fixed length of all strings generated by this
  * factory.
  */
 public ParamFactory(Method m)
 {
     this.m = m;
     this.gd = new GenerateData();
 }


@Override
public List<ParamModel> generateRandomCandidate(Random rng) {
	List<ParamModel> paramModels = new ArrayList<ParamModel>(10);
	Class params[] = this.m.getParameterTypes();
	
	ParamModel paramModel;
	for(int i = 0; i < 10; i++) {
		paramModel = new ParamModel(params.length);
		for(int j = 0; j < params.length; j++) {
			 Object data = gd.getData(params[j].toString());
			 paramModel.addParam(data);
			 //System.out.print(data + "|");
		 }
		paramModels.add(paramModel);
	}
//	System.out.println(paramModels);
	return paramModels;
}
 
 
}
